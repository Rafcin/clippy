openapi: 3.0.0
info:
  title: Clippy
  version: 1.0.0
  description: Clippy is a helpful swiss army knife for your questions.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Raf
    url: https://www.rafszuminski.com
    email: rafcin.s@gmail.com
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /api/execute-python:
    get:
      operationId: executePython
      summary: Execute Python code and return results if any are returned.
      description: Given Python code, this endpoint executes the code and returns the
        result. Optionally, it can accept an input parameter to pass to the
        Python code.
      parameters:
        - in: query
          name: code
          description: The Python code to execute. The code should be free of comments and
            formatted as a code input.
          required: true
          schema:
            type: string
        - in: query
          name: input
          description: The input to pass to the Python code. Optional. Use this query
            parameter when providing inputs like strings, integers, or JSON
            objects. If no input is required, use only the "code" query
            parameter.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The response object containing the result of the executed Python
            code. If the code produces images, markdown, or other similar
            outputs, render those outputs as markdown.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutePythonCodeResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutePythonCodeErrorResponse"
        "405":
          description: Method Not Allowed
        "500":
          description: An error occurred while executing the Python code.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutePythonCodeErrorResponse"
  /api/experimental-search:
    get:
      operationId: experimentalSearch
      summary: This API uses a large language model to return insightful results. This
        model is connected to the web and can provide current info.
      description: Give this API a query and it will return an insightful result. This
        model is connected to the web and can provide current info.
      parameters:
        - in: query
          name: query
          description: The well written specific query to ask about the URL such as "What
            is this URL about?" or "Summarize each section of the URL".
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The insightful context for the query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExperimentalSearchResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExperimentalSearchErrorResponse"
        "405":
          description: Method Not Allowed
        "500":
          description: An error occurred while processing documents.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExperimentalSearchErrorResponse"
  /api/stocks:
    get:
      operationId: stocks
      summary: Get stock market data from Alpha Vantage.
      description: Retrieve stock market data by calling a specified function from the
        Alpha Vantage API.
      tags:
        - Stocks
      parameters:
        - in: query
          name: fnc
          description: The name of the function to call from the Alpha Vantage API.
          required: true
          schema:
            type: string
            example: TIME_SERIES_INTRADAY
        - in: query
          name: symbol
          description: The symbol of the stock to retrieve.
          required: true
          schema:
            type: string
            example: AAPL
        - in: query
          name: datatype
          description: By default, datatype is equal to json. Strings json and csv are
            accepted with the following specifications - json returns the weekly
            time series in JSON format, csv returns the time series as a CSV
            (comma separated value) file.
          required: false
          schema:
            type: string
            example: csv
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlphaVantageResponse"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
                    example: Invalid symbol or function.
        "429":
          description: Too many requests.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
                    example: API request limit reached.
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: The error message.
                    example: Error fetching data from Alpha Vantage API.
  "/api/web-search?similarityQuery={similarityQuery}&url={url}":
    get:
      operationId: webSearch
      summary: This API takes a query and an optional URL and returns the results of a
        similarity search on the stored documents. If a URL is provided, it
        crawls the URL and stores the documents before performing the search.
      description: Given a string query, this endpoint performs a similarity search on
        the stored documents. Optionally, it can crawl a URL and store the
        extracted documents in Supabase before the search.
      parameters:
        - in: query
          name: similarityQuery
          description: The similarity query to use for the similarity search. Required.
          required: true
          schema:
            type: string
        - in: query
          name: url
          description: The URL to crawl and store documents from. Optional.
          schema:
            type: string
      responses:
        "200":
          description: The response object containing the results of the similarity search.
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/WebSearchResult"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebSearchErrorResponse"
        "405":
          description: Method Not Allowed
        "500":
          description: An error occurred while processing documents.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebSearchErrorResponse"
components:
  schemas:
    ExecutePythonCodeRequest:
      type: object
      properties:
        code:
          type: string
          description: The Python code to execute. The code should be free of comments and
            formatted as a code input.
        input:
          type: string
          description: The input to pass to the Python code. Optional. Use this query
            parameter when providing inputs like strings, integers, or JSON
            objects. If no input is required, use only the "code" query
            parameter.
    ExecutePythonCodeResponse:
      type: object
      properties:
        result:
          type: string
          description: The result of the executed Python code. If the code produces
            images, markdown, or other similar outputs, render those outputs as
            markdown.
    ExecutePythonCodeErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: An error message.
    ExperimentalSearchResponse:
      type: object
      properties:
        result:
          type: string
          description: The analysis of the URL.
    ExperimentalSearchErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: An error message.
    AlphaVantageResponse:
      type: object
      properties:
        Note:
          type: string
        Error Message:
          type: string
        "[ key: string ]":
          type: object
    WebSearchResult:
      type: object
      properties:
        pageContent:
          type: string
          description: The page content from the crawled page.
        metadata:
          type: object
          properties:
            url:
              type: string
              description: The URL of the crawled page.
            timestamp:
              type: string
              description: The timestamp of the crawl.
            pluginName:
              type: string
              description: The plugin used to crawl the page.
    WebSearchErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: An error message.
tags: []
